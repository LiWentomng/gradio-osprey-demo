{"guide": {"name": "state-in-blocks", "category": "building-with-blocks", "pretty_category": "Building With Blocks", "guide_index": 3, "absolute_index": 10, "pretty_name": "State In Blocks", "content": "# State in Blocks\n\nWe covered [State in Interfaces](https://gradio.app/interface-state), this guide takes a look at state in Blocks, which works mostly the same. \n\n## Global State\n\nGlobal state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.\n\n## Session State\n\nGradio supports session **state**, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is *not* shared between different users of your model. To store data in a session state, you need to do three things:\n\n1. Create a `gr.State()` object. If there is a default value to this stateful object, pass that into the constructor.\n2. In the event listener, put the `State` object as an input and output.\n3. In the event listener function, add the variable to the input parameters and the return value.\n\nLet's take a look at a game of hangman. \n\n```python\nimport gradio as gr\n\nsecret_word = \"gradio\"\n\nwith gr.Blocks() as demo:    \n    used_letters_var = gr.State([])\n    with gr.Row() as row:\n        with gr.Column():\n            input_letter = gr.Textbox(label=\"Enter letter\")\n            btn = gr.Button(\"Guess Letter\")\n        with gr.Column():\n            hangman = gr.Textbox(\n                label=\"Hangman\",\n                value=\"_\"*len(secret_word)\n            )\n            used_letters_box = gr.Textbox(label=\"Used Letters\")\n\n    def guess_letter(letter, used_letters):\n        used_letters.append(letter)\n        answer = \"\".join([\n            (letter if letter in used_letters else \"_\")\n            for letter in secret_word\n        ])\n        return {\n            used_letters_var: used_letters,\n            used_letters_box: \", \".join(used_letters),\n            hangman: answer\n        }\n    btn.click(\n        guess_letter, \n        [input_letter, used_letters_var],\n        [used_letters_var, used_letters_box, hangman]\n        )\ndemo.launch()\n```\n<gradio-app space='gradio/hangman'></gradio-app>\n\nLet's see how we do each of the 3 steps listed above in this game:\n\n1. We store the used letters in `used_letters_var`. In the constructor of `State`, we set the initial value of this to `[]`, an empty list. \n2. In `btn.click()`, we have a reference to `used_letters_var` in both the inputs and outputs.\n3. In `guess_letter`, we pass the value of this `State` to `used_letters`, and then return an updated value of this `State` in the return statement.\n\nWith more complex apps, you will likely have many State variables storing session state in a single Blocks app.\n\nLearn more about `State` in the [docs](https://gradio.app/docs#state).\n\n\n\n", "html": "<h1 id=\"state-in-blocks\">State in Blocks</h1>\n\n<p>We covered <a rel=\"noopener\" target=\"_blank\" href=\"https://gradio.app/interface-state\">State in Interfaces</a>, this guide takes a look at state in Blocks, which works mostly the same. </p>\n\n<h2 id=\"global-state\">Global State</h2>\n\n<p>Global state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.</p>\n\n<h2 id=\"session-state\">Session State</h2>\n\n<p>Gradio supports session <strong>state</strong>, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is <em>not</em> shared between different users of your model. To store data in a session state, you need to do three things:</p>\n\n<ol>\n<li>Create a <code>gr.State()</code> object. If there is a default value to this stateful object, pass that into the constructor.</li>\n<li>In the event listener, put the <code>State</code> object as an input and output.</li>\n<li>In the event listener function, add the variable to the input parameters and the return value.</li>\n</ol>\n\n<p>Let's take a look at a game of hangman. </p>\n\n<div class='codeblock'><pre><code class='lang-python'>import gradio as gr\n\nsecret_word = \"gradio\"\n\nwith gr.Blocks() as demo:    \n    used_letters_var = gr.State([])\n    with gr.Row() as row:\n        with gr.Column():\n            input_letter = gr.Textbox(label=\"Enter letter\")\n            btn = gr.Button(\"Guess Letter\")\n        with gr.Column():\n            hangman = gr.Textbox(\n                label=\"Hangman\",\n                value=\"_\"*len(secret_word)\n            )\n            used_letters_box = gr.Textbox(label=\"Used Letters\")\n\n    def guess_letter(letter, used_letters):\n        used_letters.append(letter)\n        answer = \"\".join([\n            (letter if letter in used_letters else \"_\")\n            for letter in secret_word\n        ])\n        return {\n            used_letters_var: used_letters,\n            used_letters_box: \", \".join(used_letters),\n            hangman: answer\n        }\n    btn.click(\n        guess_letter, \n        [input_letter, used_letters_var],\n        [used_letters_var, used_letters_box, hangman]\n        )\ndemo.launch()\n</code></pre></div>\n\n<p><gradio-app space='gradio/hangman'></gradio-app></p>\n\n<p>Let's see how we do each of the 3 steps listed above in this game:</p>\n\n<ol>\n<li>We store the used letters in <code>used_letters_var</code>. In the constructor of <code>State</code>, we set the initial value of this to <code>[]</code>, an empty list. </li>\n<li>In <code>btn.click()</code>, we have a reference to <code>used_letters_var</code> in both the inputs and outputs.</li>\n<li>In <code>guess_letter</code>, we pass the value of this <code>State</code> to <code>used_letters</code>, and then return an updated value of this <code>State</code> in the return statement.</li>\n</ol>\n\n<p>With more complex apps, you will likely have many State variables storing session state in a single Blocks app.</p>\n\n<p>Learn more about <code>State</code> in the <a rel=\"noopener\" target=\"_blank\" href=\"https://gradio.app/docs#state\">docs</a>.</p>\n", "tags": [], "spaces": [], "url": "/guides/state-in-blocks/", "contributor": null}}