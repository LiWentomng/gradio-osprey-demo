{"guide": {"name": "theming-guide", "category": "other-tutorials", "pretty_category": "Other Tutorials", "guide_index": null, "absolute_index": 42, "pretty_name": "Theming Guide", "content": "# Theming\nTags: THEMES\n\n## Introduction\n\nGradio features a built-in theming engine that lets you customize the look and feel of your app. You can choose from a variety of themes, or create your own. To do so, pass the `theme=` kwarg to the `Blocks` or `Interface` constructor. For example:\n\n```python\nwith gr.Blocks(theme=gr.themes.Soft()) as demo:\n    ...\n```\n\n<div class=\"wrapper\">\n<iframe\n\tsrc=\"https://gradio-theme-soft.hf.space?__theme=light\"\n\tframeborder=\"0\"\n></iframe>\n</div>\n\nGradio comes with a set of prebuilt themes which you can load from `gr.themes.*`. These are:\n\n* `gr.themes.Base()`\n* `gr.themes.Default()`\n* `gr.themes.Glass()`\n* `gr.themes.Monochrome()`\n* `gr.themes.Soft()`\n\nEach of these themes set values for hundreds of CSS variables. You can use prebuilt themes as a starting point for your own custom themes, or you can create your own themes from scratch. Let's take a look at each approach.\n\n## Using the Theme Builder\n\nThe easiest way to build a theme is using the Theme Builder. To launch the Theme Builder locally, run the following code:\n\n```python\nimport gradio as gr\n\ngr.themes.builder()\n```\n\n<gradio-app space='gradio/theme_builder'></gradio-app>\n\nYou can use the Theme Builder running on Spaces above, though it runs much faster when you launch it locally via `gr.themes.builder()`. \n\nAs you edit the values in the Theme Builder, the app will preview updates in real time. You can download the code to generate the theme you've created so you can use it in any Gradio app.\n\nIn the rest of the guide, we will cover building themes programmatically.\n\n## Extending Themes via the Constructor\n\nAlthough each theme has hundreds of CSS variables, the values for most these variables are drawn from 8 core variables which can be set through the constructor of each prebuilt theme. Modifying these 8 arguments allows you to quickly change the look and feel of your app.\n\n### Core Colors\n\nThe first 3 constructor arguments set the colors of the theme and are `gradio.themes.Color` objects. Internally, these Color objects hold brightness values for the palette of a single hue, ranging from 50, 100, 200..., 800, 900, 950. Other CSS variables are derived from these 3 colors.\n\nThe 3 color constructor arguments are:\n\n- `primary_hue`: This is the color draws attention in your theme. In the default theme, this is set to `gradio.themes.colors.orange`.\n- `secondary_hue`: This is the color that is used for secondary elements in your theme. In the default theme, this is set to `gradio.themes.colors.blue`.\n- `neutral_hue`: This is the color that is used for text and other neutral elements in your theme. In the default theme, this is set to `gradio.themes.colors.gray`.\n\nYou could modify these values using their string shortcuts, such as\n\n```python\nwith gr.Blocks(theme=gr.themes.Default(primary_hue=\"red\", secondary_hue=\"pink\")) as demo:\n    ...\n```\n\nor you could use the `Color` objects directly, like this:\n\n```python\nwith gr.Blocks(theme=gr.themes.Default(primary_hue=gr.themes.colors.red, secondary_hue=gr.themes.colors.pink)) as demo:\n    ...\n```\n<div class=\"wrapper\">\n<iframe\n\tsrc=\"https://gradio-theme-extended-step-1.hf.space?__theme=light\"\n\tframeborder=\"0\"\n></iframe>\n</div>\n\nPredefined colors are:\n\n* `slate`\n* `gray`\n* `zinc`\n* `neutral`\n* `stone`\n* `red`\n* `orange`\n* `amber`\n* `yellow`\n* `lime`\n* `green`\n* `emerald`\n* `teal`\n* `cyan`\n* `sky`\n* `blue`\n* `indigo`\n* `violet`\n* `purple`\n* `fuchsia`\n* `pink`\n* `rose`\n\nYou could also create your own custom `Color` objects and pass them in.\n\n### Core Sizing\n\nThe next 3 constructor arguments set the sizing of the theme and are `gradio.themes.Size` objects. Internally, these Size objects hold pixel size values that range from `xxs` to `xxl`. Other CSS variables are derived from these 3 sizes.\n\n- `spacing_size`: This sets the padding within and spacing between elements. In the default theme, this is set to `gradio.themes.sizes.spacing_md`.\n- `radius_size`: This sets the roundedness of corners of elements. In the default theme, this is set to `gradio.themes.sizes.radius_md`.\n- `text_size`: This sets the font size of text. In the default theme, this is set to `gradio.themes.sizes.text_md`.\n\nYou could modify these values using their string shortcuts, such as\n\n```python\nwith gr.Blocks(theme=gr.themes.Default(spacing_size=\"sm\", radius_size=\"none\")) as demo:\n    ...\n```\n\nor you could use the `Size` objects directly, like this:\n\n```python\nwith gr.Blocks(theme=gr.themes.Default(spacing_size=gr.themes.sizes.spacing_sm, radius_size=gr.themes.sizes.radius_none)) as demo:\n    ...\n```\n<div class=\"wrapper\">\n<iframe\n\tsrc=\"https://gradio-theme-extended-step-2.hf.space?__theme=light\"\n\tframeborder=\"0\"\n></iframe>\n</div>\n\nThe predefined size objects are:\n\n* `radius_none`\n* `radius_sm`\n* `radius_md`\n* `radius_lg`\n* `spacing_sm`\n* `spacing_md`\n* `spacing_lg`\n* `text_sm`\n* `text_md`\n* `text_lg`\n\nYou could also create your own custom `Size` objects and pass them in.\n\n### Core Fonts\n\nThe final 2 constructor arguments set the fonts of the theme. You can pass a list of fonts to each of these arguments to specify fallbacks. If you provide a string, it will be loaded as a system font. If you provide a `gradio.themes.GoogleFont`, the font will be loaded from Google Fonts.\n\n- `font`: This sets the primary font of the theme. In the default theme, this is set to `gradio.themes.GoogleFont(\"Source Sans Pro\")`.\n- `font_mono`: This sets the monospace font of the theme. In the default theme, this is set to `gradio.themes.GoogleFont(\"IBM Plex Mono\")`.\n\nYou could modify these values such as the following:\n\n```python\nwith gr.Blocks(theme=gr.themes.Default(font=[gr.themes.GoogleFont(\"Inconsolata\"), \"Arial\", \"sans-serif\"])) as demo:\n    ...\n```\n\n<div class=\"wrapper\">\n<iframe\n\tsrc=\"https://gradio-theme-extended-step-3.hf.space?__theme=light\"\n\tframeborder=\"0\"\n></iframe>\n</div>\n\n\n## Extending Themes via `.set()`\n\nYou can also modify the values of CSS variables after the theme has been loaded. To do so, use the `.set()` method of the theme object to get access to the CSS variables. For example:\n\n```python\ntheme = gr.themes.Default(primary_hue=\"blue\").set(\n    loader_color=\"#FF0000\",\n    slider_color=\"#FF0000\",\n)\n\nwith gr.Blocks(theme=theme) as demo:\n    ...\n```\n\nIn the example above, we've set the `loader_color` and `slider_color` variables to `#FF0000`, despite the overall `primary_color` using the blue color palette. You can set any CSS variable that is defined in the theme in this manner. \n\nYour IDE type hinting should help you navigate these variables. Since there are so many CSS variables, let's take a look at how these variables are named and organized.\n\n### CSS Variable Naming Conventions\n\nCSS variable names can get quite long, like `button_primary_background_fill_hover_dark`! However they follow a common naming convention that makes it easy to understand what they do and to find the variable you're looking for. Separated by underscores, the variable name is made up of:\n\n1. The target element, such as `button`, `slider`, or `block`.\n2. The target element type or sub-element, such as `button_primary`, or `block_label`.\n3. The property, such as `button_primary_background_fill`, or `block_label_border_width`.\n4. Any relevant state, such as `button_primary_background_fill_hover`.\n5. If the value is different in dark mode, the suffix `_dark`. For example, `input_border_color_focus_dark`.\n\nOf course, many CSS variable names are shorter than this, such as `table_border_color`, or `input_shadow`. \n\n### CSS Variable Organization\n\nThough there are hundreds of CSS variables, they do not all have to have individual values. They draw their values by referencing a set of core variables and referencing each other. This allows us to only have to modify a few variables to change the look and feel of the entire theme, while also getting finer control of individual elements that we may want to modify.\n\n#### Referencing Core Variables\n\nTo reference one of the core constructor variables, precede the variable name with an asterisk. To reference a core color, use the `*primary_`, `*secondary_`, or `*neutral_` prefix, followed by the brightness value. For example:\n\n```python\ntheme = gr.themes.Default(primary_hue=\"blue\").set(\n    button_primary_background_fill=\"*primary_200\",\n    button_primary_background_fill_hover=\"*primary_300\",\n)\n```\n\nIn the example above, we've set the `button_primary_background_fill` and `button_primary_background_fill_hover` variables to `*primary_200` and `*primary_300`. These variables will be set to the 200 and 300 brightness values of the blue primary color palette, respectively.\n\nSimilarly, to reference a core size, use the `*spacing_`, `*radius_`, or `*text_` prefix, followed by the size value. For example:\n\n```python\ntheme = gr.themes.Default(radius_size=\"md\").set(\n    button_primary_border_radius=\"*radius_xl\",\n)\n```\n\nIn the example above, we've set the `button_primary_border_radius` variable to `*radius_xl`. This variable will be set to the `xl` setting of the medium radius size range.\n\n#### Referencing Other Variables\n\nVariables can also reference each other. For example, look at the example below:\n\n```python\ntheme = gr.themes.Default().set(\n    button_primary_background_fill=\"#FF0000\",\n    button_primary_background_fill_hover=\"#FF0000\",\n    button_primary_border=\"#FF0000\",\n)\n```\n\nHaving to set these values to a common color is a bit tedious. Instead, we can reference the `button_primary_background_fill` variable in the `button_primary_background_fill_hover` and `button_primary_border` variables, using a `*` prefix. \n\n```python\ntheme = gr.themes.Default().set(\n    button_primary_background_fill=\"#FF0000\",\n    button_primary_background_fill_hover=\"*button_primary_background_fill\",\n    button_primary_border=\"*button_primary_background_fill\",\n)\n```\n\nNow, if we change the `button_primary_background_fill` variable, the `button_primary_background_fill_hover` and `button_primary_border` variables will automatically update as well.\n\nThis is particularly useful if you intend to share your theme - it makes it easy to modify the theme without having to change every variable.\n\nNote that dark mode variables automatically reference each other. For example:\n\n```python\ntheme = gr.themes.Default().set(\n    button_primary_background_fill=\"#FF0000\",\n    button_primary_background_fill_dark=\"#AAAAAA\",\n    button_primary_border=\"*button_primary_background_fill\",\n    button_primary_border_dark=\"*button_primary_background_fill_dark\",\n)\n```\n\n`button_primary_border_dark` will draw its value from `button_primary_background_fill_dark`, because dark mode always draw from the dark version of the variable.\n\n## Creating a Full Theme\n\nLet's say you want to create a theme from scratch! We'll go through it step by step - you can also see the source of prebuilt themes in the gradio source repo for reference - [here's the source](https://github.com/gradio-app/gradio/blob/main/gradio/themes/monochrome.py) for the Monochrome theme.\n\nOur new theme class will inherit from `gradio.themes.Base`, a theme that sets a lot of convenient defaults. Let's make a simple demo that creates a dummy theme called Seafoam, and make a simple app that uses it.\n\n```python\nimport gradio as gr\nfrom gradio.themes.base import Base\nimport time\n\nclass Seafoam(Base):\n    pass\n\nseafoam = Seafoam()\n\nwith gr.Blocks(theme=seafoam) as demo:\n    textbox = gr.Textbox(label=\"Name\")\n    slider = gr.Slider(label=\"Count\", minimum=0, maximum=100, step=1)\n    with gr.Row():\n        button = gr.Button(\"Submit\", variant=\"primary\")\n        clear = gr.Button(\"Clear\")\n    output = gr.Textbox(label=\"Output\")\n\n    def repeat(name, count):\n        time.sleep(3)\n        return name * count\n    \n    button.click(repeat, [textbox, slider], output)\n\ndemo.launch()\n```\n\n<div class=\"wrapper\">\n<iframe\n\tsrc=\"https://gradio-theme-new-step-1.hf.space?__theme=light\"\n\tframeborder=\"0\"\n></iframe>\n</div>\n\n\nThe Base theme is very barebones, and uses `gr.themes.Blue` as it primary color - you'll note the primary button and the loading animation are both blue as a result. Let's change the defaults core arguments of our app. We'll overwrite the constructor and pass new defaults for the core constructor arguments.\n\nWe'll use `gr.themes.Emerald` as our primary color, and set secondary and neutral hues to `gr.themes.Blue`. We'll make our text larger using `text_lg`. We'll use `Quicksand` as our default font, loaded from Google Fonts. \n\n```python\nfrom __future__ import annotations\nfrom typing import Iterable\nimport gradio as gr\nfrom gradio.themes.base import Base\nfrom gradio.themes.utils import colors, fonts, sizes\nimport time\n\n\nclass Seafoam(Base):\n    def __init__(\n        self,\n        *,\n        primary_hue: colors.Color | str = colors.emerald,\n        secondary_hue: colors.Color | str = colors.blue,\n        neutral_hue: colors.Color | str = colors.gray,\n        spacing_size: sizes.Size | str = sizes.spacing_md,\n        radius_size: sizes.Size | str = sizes.radius_md,\n        text_size: sizes.Size | str = sizes.text_lg,\n        font: fonts.Font\n        | str\n        | Iterable[fonts.Font | str] = (\n            fonts.GoogleFont(\"Quicksand\"),\n            \"ui-sans-serif\",\n            \"sans-serif\",\n        ),\n        font_mono: fonts.Font\n        | str\n        | Iterable[fonts.Font | str] = (\n            fonts.GoogleFont(\"IBM Plex Mono\"),\n            \"ui-monospace\",\n            \"monospace\",\n        ),\n    ):\n        super().__init__(\n            primary_hue=primary_hue,\n            secondary_hue=secondary_hue,\n            neutral_hue=neutral_hue,\n            spacing_size=spacing_size,\n            radius_size=radius_size,\n            text_size=text_size,\n            font=font,\n            font_mono=font_mono,\n        )\n\n\nseafoam = Seafoam()\n\nwith gr.Blocks(theme=seafoam) as demo:\n    textbox = gr.Textbox(label=\"Name\")\n    slider = gr.Slider(label=\"Count\", minimum=0, maximum=100, step=1)\n    with gr.Row():\n        button = gr.Button(\"Submit\", variant=\"primary\")\n        clear = gr.Button(\"Clear\")\n    output = gr.Textbox(label=\"Output\")\n\n    def repeat(name, count):\n        time.sleep(3)\n        return name * count\n\n    button.click(repeat, [textbox, slider], output)\n\ndemo.launch()\n\n```\n\n<div class=\"wrapper\">\n<iframe\n\tsrc=\"https://gradio-theme-new-step-2.hf.space?__theme=light\"\n\tframeborder=\"0\"\n></iframe>\n</div>\n\nSee how the primary button and the loading animation are now green? These CSS variables are tied to the `primary_hue` variable. \n\nLet's modify the theme a bit more directly. We'll call the `set()` method to overwrite CSS variable values explicitly. We can use any CSS logic, and reference our core constructor arguments using the `*` prefix.\n\n```python\nfrom __future__ import annotations\nfrom typing import Iterable\nimport gradio as gr\nfrom gradio.themes.base import Base\nfrom gradio.themes.utils import colors, fonts, sizes\nimport time\n\n\nclass Seafoam(Base):\n    def __init__(\n        self,\n        *,\n        primary_hue: colors.Color | str = colors.emerald,\n        secondary_hue: colors.Color | str = colors.blue,\n        neutral_hue: colors.Color | str = colors.blue,\n        spacing_size: sizes.Size | str = sizes.spacing_md,\n        radius_size: sizes.Size | str = sizes.radius_md,\n        text_size: sizes.Size | str = sizes.text_lg,\n        font: fonts.Font\n        | str\n        | Iterable[fonts.Font | str] = (\n            fonts.GoogleFont(\"Quicksand\"),\n            \"ui-sans-serif\",\n            \"sans-serif\",\n        ),\n        font_mono: fonts.Font\n        | str\n        | Iterable[fonts.Font | str] = (\n            fonts.GoogleFont(\"IBM Plex Mono\"),\n            \"ui-monospace\",\n            \"monospace\",\n        ),\n    ):\n        super().__init__(\n            primary_hue=primary_hue,\n            secondary_hue=secondary_hue,\n            neutral_hue=neutral_hue,\n            spacing_size=spacing_size,\n            radius_size=radius_size,\n            text_size=text_size,\n            font=font,\n            font_mono=font_mono,\n        )\n        super().set(\n            body_background_fill=\"repeating-linear-gradient(45deg, *primary_200, *primary_200 10px, *primary_50 10px, *primary_50 20px)\",\n            body_background_fill_dark=\"repeating-linear-gradient(45deg, *primary_800, *primary_800 10px, *primary_900 10px, *primary_900 20px)\",\n            button_primary_background_fill=\"linear-gradient(90deg, *primary_300, *secondary_400)\",\n            button_primary_background_fill_hover=\"linear-gradient(90deg, *primary_200, *secondary_300)\",\n            button_primary_text_color=\"white\",\n            button_primary_background_fill_dark=\"linear-gradient(90deg, *primary_600, *secondary_800)\",\n            slider_color=\"*secondary_300\",\n            slider_color_dark=\"*secondary_600\",\n            block_title_text_weight=\"600\",\n            block_border_width=\"3px\",\n            block_shadow=\"*shadow_drop_lg\",\n            button_shadow=\"*shadow_drop_lg\",\n            button_large_padding=\"32px\",\n        )\n\n\nseafoam = Seafoam()\n\nwith gr.Blocks(theme=seafoam) as demo:\n    textbox = gr.Textbox(label=\"Name\")\n    slider = gr.Slider(label=\"Count\", minimum=0, maximum=100, step=1)\n    with gr.Row():\n        button = gr.Button(\"Submit\", variant=\"primary\")\n        clear = gr.Button(\"Clear\")\n    output = gr.Textbox(label=\"Output\")\n\n    def repeat(name, count):\n        time.sleep(3)\n        return name * count\n\n    button.click(repeat, [textbox, slider], output)\n\ndemo.launch()\n\n```\n<div class=\"wrapper\">\n<iframe\n\tsrc=\"https://gradio-theme-new-step-3.hf.space?__theme=light\"\n\tframeborder=\"0\"\n></iframe>\n</div>\n\n\nLook how fun our theme looks now! With just a few variable changes, our theme looks completely different.\n\nYou may find it helpful to explore the [source code of the other prebuilt themes](https://github.com/gradio-app/gradio/blob/main/gradio/themes) to see how they modified the base theme. You can also find your browser's Inspector useful to select elements from the UI and see what CSS variables are being used in the styles panel. \n\n## Sharing Themes\n\nOnce you have created a theme, you can upload it to the HuggingFace Hub to let others view it, use it, and build off of it!\n\n### Uploading a Theme\nThere are two ways to upload a theme, via the theme class instance or the command line. We will cover both of them with the previously created `seafoam` theme.\n\n* Via the class instance\n\nEach theme instance has a method called `push_to_hub` we can use to upload a theme to the HuggingFace hub.\n\n```python\nseafoam.push_to_hub(repo_name=\"seafoam\",\n                    version=\"0.0.1\",\n\t\t\t\t\thf_token=\"<token>\")\n```\n\n* Via the command line\n\nFirst save the theme to disk\n```python\nseafoam.dump(filename=\"seafoam.json\")\n```\n\nThen use the `upload_theme` command:\n\n```bash\nupload_theme\\\n\"seafoam.json\"\\\n\"seafoam\"\\\n--version \"0.0.1\"\\\n--hf_token \"<token>\"\n```\n\nIn order to upload a theme, you must have a HuggingFace account and pass your [Access Token](https://huggingface.co/docs/huggingface_hub/quick-start#login)\nas the `hf_token` argument. However, if you log in via the [HuggingFace command line](https://huggingface.co/docs/huggingface_hub/quick-start#login) (which comes installed with `gradio`),\nyou can omit the `hf_token` argument.\n\nThe `version` argument lets you specify a valid [semantic version](https://www.geeksforgeeks.org/introduction-semantic-versioning/) string for your theme.\nThat way your users are able to specify which version of your theme they want to use in their apps. This also lets you publish updates to your theme without worrying\nabout changing how previously created apps look. The `version` argument is optional. If omitted, the next patch version is automatically applied.\n\n### Theme Previews\n\nBy calling `push_to_hub` or `upload_theme`, the theme assets will be stored in a [HuggingFace space](https://huggingface.co/docs/hub/spaces-overview).\n\nThe theme preview for our seafoam theme is here: [seafoam preview](https://huggingface.co/spaces/gradio/seafoam).\n\n<div class=\"wrapper\">\n<iframe\n\tsrc=\"https://gradio-seafoam.hf.space?__theme=light\"\n\tframeborder=\"0\"\n></iframe>\n</div>\n\n### Discovering Themes\n\nThe [Theme Gallery](https://huggingface.co/spaces/gradio/theme-gallery) shows all the public gradio themes. After publishing your theme,\nit will automatically show up in the theme gallery after a couple of minutes. \n\nYou can sort the themes by the number of likes on the space and from most to least recently created as well as toggling themes between light and dark mode.\n\n<div class=\"wrapper\">\n<iframe\n\tsrc=\"https://gradio-theme-gallery.hf.space\"\n\tframeborder=\"0\"\n></iframe>\n</div>\n\n### Downloading\nTo use a theme from the hub, use the `from_hub` method on the `ThemeClass` and pass it to your app:\n\n```python\nmy_theme = gr.Theme.from_hub(\"gradio/seafoam\")\n\nwith gr.Blocks(theme=my_theme) as demo:\n    ....\n```\n\nYou can also pass the theme string directly to `Blocks` or `Interface` (`gr.Blocks(theme=\"gradio/seafoam\")`)\n\nYou can pin your app to an upstream theme version by using semantic versioning expressions.\n\nFor example, the following would ensure the theme we load from the `seafoam` repo was between versions `0.0.1` and `0.1.0`:\n\n```python\nwith gr.Blocks(theme=\"gradio/seafoam@>=0.0.1,<0.1.0\") as demo:\n    ....\n```\n\nEnjoy creating your own themes! If you make one you're proud of, please share it with the world by uploading it to the hub! \nIf you tag us on [Twitter](https://twitter.com/gradio) we can give your theme a shout out! \n\n<style>\n.wrapper {\n    position: relative;\n    padding-bottom: 56.25%;\n    padding-top: 25px;\n    height: 0;\n}\n.wrapper iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n", "html": "<h1 id=\"theming\">Theming</h1>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>Gradio features a built-in theming engine that lets you customize the look and feel of your app. You can choose from a variety of themes, or create your own. To do so, pass the <code>theme=</code> kwarg to the <code>Blocks</code> or <code>Interface</code> constructor. For example:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>with gr.Blocks(theme=gr.themes.Soft()) as demo:\n    ...\n</code></pre></div>\n\n<div class=\"wrapper\">\n<iframe\n    src=\"https://gradio-theme-soft.hf.space?__theme=light\"\n    frameborder=\"0\"\n></iframe>\n</div>\n\n<p>Gradio comes with a set of prebuilt themes which you can load from <code>gr.themes.*</code>. These are:</p>\n\n<ul>\n<li><code>gr.themes.Base()</code></li>\n<li><code>gr.themes.Default()</code></li>\n<li><code>gr.themes.Glass()</code></li>\n<li><code>gr.themes.Monochrome()</code></li>\n<li><code>gr.themes.Soft()</code></li>\n</ul>\n\n<p>Each of these themes set values for hundreds of CSS variables. You can use prebuilt themes as a starting point for your own custom themes, or you can create your own themes from scratch. Let's take a look at each approach.</p>\n\n<h2 id=\"using-the-theme-builder\">Using the Theme Builder</h2>\n\n<p>The easiest way to build a theme is using the Theme Builder. To launch the Theme Builder locally, run the following code:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>import gradio as gr\n\ngr.themes.builder()\n</code></pre></div>\n\n<gradio-app space='gradio/theme_builder'></gradio-app>\n\nYou can use the Theme Builder running on Spaces above, though it runs much faster when you launch it locally via `gr.themes.builder()`. \n\nAs you edit the values in the Theme Builder, the app will preview updates in real time. You can download the code to generate the theme you've created so you can use it in any Gradio app.\n\nIn the rest of the guide, we will cover building themes programmatically.\n\n## Extending Themes via the Constructor\n\nAlthough each theme has hundreds of CSS variables, the values for most these variables are drawn from 8 core variables which can be set through the constructor of each prebuilt theme. Modifying these 8 arguments allows you to quickly change the look and feel of your app.\n\n### Core Colors\n\nThe first 3 constructor arguments set the colors of the theme and are `gradio.themes.Color` objects. Internally, these Color objects hold brightness values for the palette of a single hue, ranging from 50, 100, 200..., 800, 900, 950. Other CSS variables are derived from these 3 colors.\n\nThe 3 color constructor arguments are:\n\n- `primary_hue`: This is the color draws attention in your theme. In the default theme, this is set to `gradio.themes.colors.orange`.\n- `secondary_hue`: This is the color that is used for secondary elements in your theme. In the default theme, this is set to `gradio.themes.colors.blue`.\n- `neutral_hue`: This is the color that is used for text and other neutral elements in your theme. In the default theme, this is set to `gradio.themes.colors.gray`.\n\nYou could modify these values using their string shortcuts, such as\n\n<div class='codeblock'><pre><code class='lang-python'>with gr.Blocks(theme=gr.themes.Default(primary_hue=\"red\", secondary_hue=\"pink\")) as demo:\n    ...\n</code></pre></div>\n\nor you could use the `Color` objects directly, like this:\n\n<div class='codeblock'><pre><code class='lang-python'>with gr.Blocks(theme=gr.themes.Default(primary_hue=gr.themes.colors.red, secondary_hue=gr.themes.colors.pink)) as demo:\n    ...\n</code></pre></div>\n<div class=\"wrapper\">\n<iframe\n    src=\"https://gradio-theme-extended-step-1.hf.space?__theme=light\"\n    frameborder=\"0\"\n></iframe>\n</div>\n\n<p>Predefined colors are:</p>\n\n<ul>\n<li><code>slate</code></li>\n<li><code>gray</code></li>\n<li><code>zinc</code></li>\n<li><code>neutral</code></li>\n<li><code>stone</code></li>\n<li><code>red</code></li>\n<li><code>orange</code></li>\n<li><code>amber</code></li>\n<li><code>yellow</code></li>\n<li><code>lime</code></li>\n<li><code>green</code></li>\n<li><code>emerald</code></li>\n<li><code>teal</code></li>\n<li><code>cyan</code></li>\n<li><code>sky</code></li>\n<li><code>blue</code></li>\n<li><code>indigo</code></li>\n<li><code>violet</code></li>\n<li><code>purple</code></li>\n<li><code>fuchsia</code></li>\n<li><code>pink</code></li>\n<li><code>rose</code></li>\n</ul>\n\n<p>You could also create your own custom <code>Color</code> objects and pass them in.</p>\n\n<h3 id=\"core-sizing\">Core Sizing</h3>\n\n<p>The next 3 constructor arguments set the sizing of the theme and are <code>gradio.themes.Size</code> objects. Internally, these Size objects hold pixel size values that range from <code>xxs</code> to <code>xxl</code>. Other CSS variables are derived from these 3 sizes.</p>\n\n<ul>\n<li><code>spacing_size</code>: This sets the padding within and spacing between elements. In the default theme, this is set to <code>gradio.themes.sizes.spacing_md</code>.</li>\n<li><code>radius_size</code>: This sets the roundedness of corners of elements. In the default theme, this is set to <code>gradio.themes.sizes.radius_md</code>.</li>\n<li><code>text_size</code>: This sets the font size of text. In the default theme, this is set to <code>gradio.themes.sizes.text_md</code>.</li>\n</ul>\n\n<p>You could modify these values using their string shortcuts, such as</p>\n\n<div class='codeblock'><pre><code class='lang-python'>with gr.Blocks(theme=gr.themes.Default(spacing_size=\"sm\", radius_size=\"none\")) as demo:\n    ...\n</code></pre></div>\n\nor you could use the `Size` objects directly, like this:\n\n<div class='codeblock'><pre><code class='lang-python'>with gr.Blocks(theme=gr.themes.Default(spacing_size=gr.themes.sizes.spacing_sm, radius_size=gr.themes.sizes.radius_none)) as demo:\n    ...\n</code></pre></div>\n<div class=\"wrapper\">\n<iframe\n    src=\"https://gradio-theme-extended-step-2.hf.space?__theme=light\"\n    frameborder=\"0\"\n></iframe>\n</div>\n\n<p>The predefined size objects are:</p>\n\n<ul>\n<li><code>radius_none</code></li>\n<li><code>radius_sm</code></li>\n<li><code>radius_md</code></li>\n<li><code>radius_lg</code></li>\n<li><code>spacing_sm</code></li>\n<li><code>spacing_md</code></li>\n<li><code>spacing_lg</code></li>\n<li><code>text_sm</code></li>\n<li><code>text_md</code></li>\n<li><code>text_lg</code></li>\n</ul>\n\n<p>You could also create your own custom <code>Size</code> objects and pass them in.</p>\n\n<h3 id=\"core-fonts\">Core Fonts</h3>\n\n<p>The final 2 constructor arguments set the fonts of the theme. You can pass a list of fonts to each of these arguments to specify fallbacks. If you provide a string, it will be loaded as a system font. If you provide a <code>gradio.themes.GoogleFont</code>, the font will be loaded from Google Fonts.</p>\n\n<ul>\n<li><code>font</code>: This sets the primary font of the theme. In the default theme, this is set to <code>gradio.themes.GoogleFont(\"Source Sans Pro\")</code>.</li>\n<li><code>font_mono</code>: This sets the monospace font of the theme. In the default theme, this is set to <code>gradio.themes.GoogleFont(\"IBM Plex Mono\")</code>.</li>\n</ul>\n\n<p>You could modify these values such as the following:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>with gr.Blocks(theme=gr.themes.Default(font=[gr.themes.GoogleFont(\"Inconsolata\"), \"Arial\", \"sans-serif\"])) as demo:\n    ...\n</code></pre></div>\n\n<div class=\"wrapper\">\n<iframe\n    src=\"https://gradio-theme-extended-step-3.hf.space?__theme=light\"\n    frameborder=\"0\"\n></iframe>\n</div>\n\n<h2 id=\"extending-themes-via-set\">Extending Themes via <code>.set()</code></h2>\n\n<p>You can also modify the values of CSS variables after the theme has been loaded. To do so, use the <code>.set()</code> method of the theme object to get access to the CSS variables. For example:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>theme = gr.themes.Default(primary_hue=\"blue\").set(\n    loader_color=\"#FF0000\",\n    slider_color=\"#FF0000\",\n)\n\nwith gr.Blocks(theme=theme) as demo:\n    ...\n</code></pre></div>\n\nIn the example above, we've set the `loader_color` and `slider_color` variables to `#FF0000`, despite the overall `primary_color` using the blue color palette. You can set any CSS variable that is defined in the theme in this manner. \n\nYour IDE type hinting should help you navigate these variables. Since there are so many CSS variables, let's take a look at how these variables are named and organized.\n\n### CSS Variable Naming Conventions\n\nCSS variable names can get quite long, like `button_primary_background_fill_hover_dark`! However they follow a common naming convention that makes it easy to understand what they do and to find the variable you're looking for. Separated by underscores, the variable name is made up of:\n\n1. The target element, such as `button`, `slider`, or `block`.\n2. The target element type or sub-element, such as `button_primary`, or `block_label`.\n3. The property, such as `button_primary_background_fill`, or `block_label_border_width`.\n4. Any relevant state, such as `button_primary_background_fill_hover`.\n5. If the value is different in dark mode, the suffix `_dark`. For example, `input_border_color_focus_dark`.\n\nOf course, many CSS variable names are shorter than this, such as `table_border_color`, or `input_shadow`. \n\n### CSS Variable Organization\n\nThough there are hundreds of CSS variables, they do not all have to have individual values. They draw their values by referencing a set of core variables and referencing each other. This allows us to only have to modify a few variables to change the look and feel of the entire theme, while also getting finer control of individual elements that we may want to modify.\n\n#### Referencing Core Variables\n\nTo reference one of the core constructor variables, precede the variable name with an asterisk. To reference a core color, use the `*primary_`, `*secondary_`, or `*neutral_` prefix, followed by the brightness value. For example:\n\n<div class='codeblock'><pre><code class='lang-python'>theme = gr.themes.Default(primary_hue=\"blue\").set(\n    button_primary_background_fill=\"*primary_200\",\n    button_primary_background_fill_hover=\"*primary_300\",\n)\n</code></pre></div>\n\nIn the example above, we've set the `button_primary_background_fill` and `button_primary_background_fill_hover` variables to `*primary_200` and `*primary_300`. These variables will be set to the 200 and 300 brightness values of the blue primary color palette, respectively.\n\nSimilarly, to reference a core size, use the `*spacing_`, `*radius_`, or `*text_` prefix, followed by the size value. For example:\n\n<div class='codeblock'><pre><code class='lang-python'>theme = gr.themes.Default(radius_size=\"md\").set(\n    button_primary_border_radius=\"*radius_xl\",\n)\n</code></pre></div>\n\nIn the example above, we've set the `button_primary_border_radius` variable to `*radius_xl`. This variable will be set to the `xl` setting of the medium radius size range.\n\n#### Referencing Other Variables\n\nVariables can also reference each other. For example, look at the example below:\n\n<div class='codeblock'><pre><code class='lang-python'>theme = gr.themes.Default().set(\n    button_primary_background_fill=\"#FF0000\",\n    button_primary_background_fill_hover=\"#FF0000\",\n    button_primary_border=\"#FF0000\",\n)\n</code></pre></div>\n\nHaving to set these values to a common color is a bit tedious. Instead, we can reference the `button_primary_background_fill` variable in the `button_primary_background_fill_hover` and `button_primary_border` variables, using a `*` prefix. \n\n<div class='codeblock'><pre><code class='lang-python'>theme = gr.themes.Default().set(\n    button_primary_background_fill=\"#FF0000\",\n    button_primary_background_fill_hover=\"*button_primary_background_fill\",\n    button_primary_border=\"*button_primary_background_fill\",\n)\n</code></pre></div>\n\nNow, if we change the `button_primary_background_fill` variable, the `button_primary_background_fill_hover` and `button_primary_border` variables will automatically update as well.\n\nThis is particularly useful if you intend to share your theme - it makes it easy to modify the theme without having to change every variable.\n\nNote that dark mode variables automatically reference each other. For example:\n\n<div class='codeblock'><pre><code class='lang-python'>theme = gr.themes.Default().set(\n    button_primary_background_fill=\"#FF0000\",\n    button_primary_background_fill_dark=\"#AAAAAA\",\n    button_primary_border=\"*button_primary_background_fill\",\n    button_primary_border_dark=\"*button_primary_background_fill_dark\",\n)\n</code></pre></div>\n\n`button_primary_border_dark` will draw its value from `button_primary_background_fill_dark`, because dark mode always draw from the dark version of the variable.\n\n## Creating a Full Theme\n\nLet's say you want to create a theme from scratch! We'll go through it step by step - you can also see the source of prebuilt themes in the gradio source repo for reference - [here's the source](https://github.com/gradio-app/gradio/blob/main/gradio/themes/monochrome.py) for the Monochrome theme.\n\nOur new theme class will inherit from `gradio.themes.Base`, a theme that sets a lot of convenient defaults. Let's make a simple demo that creates a dummy theme called Seafoam, and make a simple app that uses it.\n\n<div class='codeblock'><pre><code class='lang-python'>import gradio as gr\nfrom gradio.themes.base import Base\nimport time\n\nclass Seafoam(Base):\n    pass\n\nseafoam = Seafoam()\n\nwith gr.Blocks(theme=seafoam) as demo:\n    textbox = gr.Textbox(label=\"Name\")\n    slider = gr.Slider(label=\"Count\", minimum=0, maximum=100, step=1)\n    with gr.Row():\n        button = gr.Button(\"Submit\", variant=\"primary\")\n        clear = gr.Button(\"Clear\")\n    output = gr.Textbox(label=\"Output\")\n\n    def repeat(name, count):\n        time.sleep(3)\n        return name * count\n\n    button.click(repeat, [textbox, slider], output)\n\ndemo.launch()\n</code></pre></div>\n\n<div class=\"wrapper\">\n<iframe\n    src=\"https://gradio-theme-new-step-1.hf.space?__theme=light\"\n    frameborder=\"0\"\n></iframe>\n</div>\n\n<p>The Base theme is very barebones, and uses <code>gr.themes.Blue</code> as it primary color - you'll note the primary button and the loading animation are both blue as a result. Let's change the defaults core arguments of our app. We'll overwrite the constructor and pass new defaults for the core constructor arguments.</p>\n\n<p>We'll use <code>gr.themes.Emerald</code> as our primary color, and set secondary and neutral hues to <code>gr.themes.Blue</code>. We'll make our text larger using <code>text_lg</code>. We'll use <code>Quicksand</code> as our default font, loaded from Google Fonts. </p>\n\n<div class='codeblock'><pre><code class='lang-python'>from __future__ import annotations\nfrom typing import Iterable\nimport gradio as gr\nfrom gradio.themes.base import Base\nfrom gradio.themes.utils import colors, fonts, sizes\nimport time\n\n\nclass Seafoam(Base):\n    def __init__(\n        self,\n        *,\n        primary_hue: colors.Color | str = colors.emerald,\n        secondary_hue: colors.Color | str = colors.blue,\n        neutral_hue: colors.Color | str = colors.gray,\n        spacing_size: sizes.Size | str = sizes.spacing_md,\n        radius_size: sizes.Size | str = sizes.radius_md,\n        text_size: sizes.Size | str = sizes.text_lg,\n        font: fonts.Font\n        | str\n        | Iterable[fonts.Font | str] = (\n            fonts.GoogleFont(\"Quicksand\"),\n            \"ui-sans-serif\",\n            \"sans-serif\",\n        ),\n        font_mono: fonts.Font\n        | str\n        | Iterable[fonts.Font | str] = (\n            fonts.GoogleFont(\"IBM Plex Mono\"),\n            \"ui-monospace\",\n            \"monospace\",\n        ),\n    ):\n        super().__init__(\n            primary_hue=primary_hue,\n            secondary_hue=secondary_hue,\n            neutral_hue=neutral_hue,\n            spacing_size=spacing_size,\n            radius_size=radius_size,\n            text_size=text_size,\n            font=font,\n            font_mono=font_mono,\n        )\n\n\nseafoam = Seafoam()\n\nwith gr.Blocks(theme=seafoam) as demo:\n    textbox = gr.Textbox(label=\"Name\")\n    slider = gr.Slider(label=\"Count\", minimum=0, maximum=100, step=1)\n    with gr.Row():\n        button = gr.Button(\"Submit\", variant=\"primary\")\n        clear = gr.Button(\"Clear\")\n    output = gr.Textbox(label=\"Output\")\n\n    def repeat(name, count):\n        time.sleep(3)\n        return name * count\n\n    button.click(repeat, [textbox, slider], output)\n\ndemo.launch()\n\n</code></pre></div>\n\n<div class=\"wrapper\">\n<iframe\n    src=\"https://gradio-theme-new-step-2.hf.space?__theme=light\"\n    frameborder=\"0\"\n></iframe>\n</div>\n\n<p>See how the primary button and the loading animation are now green? These CSS variables are tied to the <code>primary_hue</code> variable. </p>\n\n<p>Let's modify the theme a bit more directly. We'll call the <code>set()</code> method to overwrite CSS variable values explicitly. We can use any CSS logic, and reference our core constructor arguments using the <code>*</code> prefix.</p>\n\n<div class='codeblock'><pre><code class='lang-python'>from __future__ import annotations\nfrom typing import Iterable\nimport gradio as gr\nfrom gradio.themes.base import Base\nfrom gradio.themes.utils import colors, fonts, sizes\nimport time\n\n\nclass Seafoam(Base):\n    def __init__(\n        self,\n        *,\n        primary_hue: colors.Color | str = colors.emerald,\n        secondary_hue: colors.Color | str = colors.blue,\n        neutral_hue: colors.Color | str = colors.blue,\n        spacing_size: sizes.Size | str = sizes.spacing_md,\n        radius_size: sizes.Size | str = sizes.radius_md,\n        text_size: sizes.Size | str = sizes.text_lg,\n        font: fonts.Font\n        | str\n        | Iterable[fonts.Font | str] = (\n            fonts.GoogleFont(\"Quicksand\"),\n            \"ui-sans-serif\",\n            \"sans-serif\",\n        ),\n        font_mono: fonts.Font\n        | str\n        | Iterable[fonts.Font | str] = (\n            fonts.GoogleFont(\"IBM Plex Mono\"),\n            \"ui-monospace\",\n            \"monospace\",\n        ),\n    ):\n        super().__init__(\n            primary_hue=primary_hue,\n            secondary_hue=secondary_hue,\n            neutral_hue=neutral_hue,\n            spacing_size=spacing_size,\n            radius_size=radius_size,\n            text_size=text_size,\n            font=font,\n            font_mono=font_mono,\n        )\n        super().set(\n            body_background_fill=\"repeating-linear-gradient(45deg, *primary_200, *primary_200 10px, *primary_50 10px, *primary_50 20px)\",\n            body_background_fill_dark=\"repeating-linear-gradient(45deg, *primary_800, *primary_800 10px, *primary_900 10px, *primary_900 20px)\",\n            button_primary_background_fill=\"linear-gradient(90deg, *primary_300, *secondary_400)\",\n            button_primary_background_fill_hover=\"linear-gradient(90deg, *primary_200, *secondary_300)\",\n            button_primary_text_color=\"white\",\n            button_primary_background_fill_dark=\"linear-gradient(90deg, *primary_600, *secondary_800)\",\n            slider_color=\"*secondary_300\",\n            slider_color_dark=\"*secondary_600\",\n            block_title_text_weight=\"600\",\n            block_border_width=\"3px\",\n            block_shadow=\"*shadow_drop_lg\",\n            button_shadow=\"*shadow_drop_lg\",\n            button_large_padding=\"32px\",\n        )\n\n\nseafoam = Seafoam()\n\nwith gr.Blocks(theme=seafoam) as demo:\n    textbox = gr.Textbox(label=\"Name\")\n    slider = gr.Slider(label=\"Count\", minimum=0, maximum=100, step=1)\n    with gr.Row():\n        button = gr.Button(\"Submit\", variant=\"primary\")\n        clear = gr.Button(\"Clear\")\n    output = gr.Textbox(label=\"Output\")\n\n    def repeat(name, count):\n        time.sleep(3)\n        return name * count\n\n    button.click(repeat, [textbox, slider], output)\n\ndemo.launch()\n\n</code></pre></div>\n<div class=\"wrapper\">\n<iframe\n    src=\"https://gradio-theme-new-step-3.hf.space?__theme=light\"\n    frameborder=\"0\"\n></iframe>\n</div>\n\n<p>Look how fun our theme looks now! With just a few variable changes, our theme looks completely different.</p>\n\n<p>You may find it helpful to explore the <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/gradio-app/gradio/blob/main/gradio/themes\">source code of the other prebuilt themes</a> to see how they modified the base theme. You can also find your browser's Inspector useful to select elements from the UI and see what CSS variables are being used in the styles panel. </p>\n\n<h2 id=\"sharing-themes\">Sharing Themes</h2>\n\n<p>Once you have created a theme, you can upload it to the HuggingFace Hub to let others view it, use it, and build off of it!</p>\n\n<h3 id=\"uploading-a-theme\">Uploading a Theme</h3>\n\n<p>There are two ways to upload a theme, via the theme class instance or the command line. We will cover both of them with the previously created <code>seafoam</code> theme.</p>\n\n<ul>\n<li>Via the class instance</li>\n</ul>\n\n<p>Each theme instance has a method called <code>push_to_hub</code> we can use to upload a theme to the HuggingFace hub.</p>\n\n<div class='codeblock'><pre><code class='lang-python'>seafoam.push_to_hub(repo_name=\"seafoam\",\n                    version=\"0.0.1\",\n                    hf_token=\"<token>\")\n</code></pre></div>\n\n* Via the command line\n\nFirst save the theme to disk\n<div class='codeblock'><pre><code class='lang-python'>seafoam.dump(filename=\"seafoam.json\")\n</code></pre></div>\n\nThen use the `upload_theme` command:\n\n<div class='codeblock'><pre><code class='lang-bash'>upload_theme\\\n\"seafoam.json\"\\\n\"seafoam\"\\\n--version \"0.0.1\"\\\n--hf_token \"<token>\"\n</code></pre></div>\n\nIn order to upload a theme, you must have a HuggingFace account and pass your [Access Token](https://huggingface.co/docs/huggingface_hub/quick-start#login)\nas the `hf_token` argument. However, if you log in via the [HuggingFace command line](https://huggingface.co/docs/huggingface_hub/quick-start#login) (which comes installed with `gradio`),\nyou can omit the `hf_token` argument.\n\nThe `version` argument lets you specify a valid [semantic version](https://www.geeksforgeeks.org/introduction-semantic-versioning/) string for your theme.\nThat way your users are able to specify which version of your theme they want to use in their apps. This also lets you publish updates to your theme without worrying\nabout changing how previously created apps look. The `version` argument is optional. If omitted, the next patch version is automatically applied.\n\n### Theme Previews\n\nBy calling `push_to_hub` or `upload_theme`, the theme assets will be stored in a [HuggingFace space](https://huggingface.co/docs/hub/spaces-overview).\n\nThe theme preview for our seafoam theme is here: [seafoam preview](https://huggingface.co/spaces/gradio/seafoam).\n\n<div class=\"wrapper\">\n<iframe\n    src=\"https://gradio-seafoam.hf.space?__theme=light\"\n    frameborder=\"0\"\n></iframe>\n</div>\n\n<h3 id=\"discovering-themes\">Discovering Themes</h3>\n\n<p>The <a rel=\"noopener\" target=\"_blank\" href=\"https://huggingface.co/spaces/gradio/theme-gallery\">Theme Gallery</a> shows all the public gradio themes. After publishing your theme,\nit will automatically show up in the theme gallery after a couple of minutes. </p>\n\n<p>You can sort the themes by the number of likes on the space and from most to least recently created as well as toggling themes between light and dark mode.</p>\n\n<div class=\"wrapper\">\n<iframe\n    src=\"https://gradio-theme-gallery.hf.space\"\n    frameborder=\"0\"\n></iframe>\n</div>\n\n<h3 id=\"downloading\">Downloading</h3>\n\n<p>To use a theme from the hub, use the <code>from_hub</code> method on the <code>ThemeClass</code> and pass it to your app:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>my_theme = gr.Theme.from_hub(\"gradio/seafoam\")\n\nwith gr.Blocks(theme=my_theme) as demo:\n    ....\n</code></pre></div>\n\n<p>You can also pass the theme string directly to <code>Blocks</code> or <code>Interface</code> (<code>gr.Blocks(theme=\"gradio/seafoam\")</code>)</p>\n\n<p>You can pin your app to an upstream theme version by using semantic versioning expressions.</p>\n\n<p>For example, the following would ensure the theme we load from the <code>seafoam</code> repo was between versions <code>0.0.1</code> and <code>0.1.0</code>:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>with gr.Blocks(theme=\"gradio/seafoam@>=0.0.1,<0.1.0\") as demo:\n    ....\n</code></pre></div>\n\n<p>Enjoy creating your own themes! If you make one you're proud of, please share it with the world by uploading it to the hub! \nIf you tag us on <a rel=\"noopener\" target=\"_blank\" href=\"https://twitter.com/gradio\">Twitter</a> we can give your theme a shout out! </p>\n\n<p><style>\n.wrapper {\n    position: relative;\n    padding-bottom: 56.25%;\n    padding-top: 25px;\n    height: 0;\n}\n.wrapper iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style></p>\n", "tags": ["THEMES"], "spaces": [], "url": "/guides/theming-guide/", "contributor": null}}