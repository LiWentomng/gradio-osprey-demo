{"guide": {"name": "using-flagging", "category": "other-tutorials", "pretty_category": "Other Tutorials", "guide_index": null, "absolute_index": 43, "pretty_name": "Using Flagging", "content": "# Using Flagging\n\nRelated spaces: https://huggingface.co/spaces/gradio/calculator-flagging-crowdsourced, https://huggingface.co/spaces/gradio/calculator-flagging-options, https://huggingface.co/spaces/gradio/calculator-flag-basic\nTags: FLAGGING, DATA\n\n## Introduction\n\nWhen you demo a machine learning model, you might want to collect data from users who try the model, particularly data points in which the model is not behaving as expected. Capturing these \"hard\" data points is valuable because it allows you to improve your machine learning model and make it more reliable and robust.\n\nGradio simplifies the collection of this data by including a **Flag** button with every `Interface`. This allows a user or tester to easily send data back to the machine where the demo is running. In this Guide, we discuss more about how to use the flagging feature, both with `gradio.Interface` as well as with `gradio.Blocks`.\n\n## The **Flag** button in `gradio.Interface`\n\nFlagging with Gradio's `Interface` is especially easy. By default, underneath the output components, there is a button marked **Flag**. When a user testing your model sees input with interesting output, they can click the flag button to send the input and output data back to the machine where the demo is running. The sample is saved to a CSV log file (by default). If the demo involves images, audio, video, or other types of files, these are saved separately in a parallel directory and the paths to these files are saved in the CSV file.\n\nThere are [four parameters](https://gradio.app/docs/#interface-header) in `gradio.Interface` that control how flagging works. We will go over them in greater detail.\n\n* `allow_flagging`: this parameter can be set to either `\"manual\"` (default), `\"auto\"`, or `\"never\"`.                 \n    * `manual`: users will see a button to flag, and samples are only flagged when the button is clicked.\n    * `auto`: users will not see a button to flag, but every sample will be flagged automatically. \n    * `never`: users will not see a button to flag, and no sample will be flagged. \n* `flagging_options`: this parameter can be either `None` (default) or a list of strings.\n    * If `None`, then the user simply clicks on the **Flag** button and no additional options are shown.\n    * If a list of strings are provided, then the user sees several buttons, corresponding to each of the strings that are provided. For example, if the value of this parameter is `[\"Incorrect\", \"Ambiguous\"]`, then buttons labeled **Flag as Incorrect** and **Flag as Ambiguous** appear. This only applies if `allow_flagging` is `\"manual\"`.\n    * The chosen option is then logged along with the input and output.\n* `flagging_dir`: this parameter takes a string.\n    * It represents what to name the directory where flagged data is stored.\n* `flagging_callback`: this parameter takes an instance of a subclass of the `FlaggingCallback` class\n    * Using this parameter allows you to write custom code that gets run when the flag button is clicked\n    * By default, this is set to an instance of `gr.CSVLogger`\n    * One example is setting it to an instance of `gr.HuggingFaceDatasetSaver` which can allow you to pipe any flagged data into a HuggingFace Dataset. (See more below.)\n\n## What happens to flagged data?\n\nWithin the directory provided by the `flagging_dir` argument, a CSV file will log the flagged data. \n\nHere's an example: The code below creates the calculator interface embedded below it:\n\n```python\nimport gradio as gr\n\n\ndef calculator(num1, operation, num2):\n    if operation == \"add\":\n        return num1 + num2\n    elif operation == \"subtract\":\n        return num1 - num2\n    elif operation == \"multiply\":\n        return num1 * num2\n    elif operation == \"divide\":\n        return num1 / num2\n\n\niface = gr.Interface(\n    calculator,\n    [\"number\", gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]), \"number\"],\n    \"number\",\n    allow_flagging=\"manual\"\n)\n\niface.launch()\n```\n\n<gradio-app space=\"gradio/calculator-flag-basic/\"></gradio-app>\n\nWhen you click the flag button above, the directory where the interface was launched will include a new flagged subfolder, with a csv file inside it. This csv file includes all the data that was flagged. \n\n```directory\n+-- flagged/\n|   +-- logs.csv\n```\n_flagged/logs.csv_\n```csv\nnum1,operation,num2,Output,timestamp\n5,add,7,12,2022-01-31 11:40:51.093412\n6,subtract,1.5,4.5,2022-01-31 03:25:32.023542\n```\n\nIf the interface involves file data, such as for Image and Audio components, folders will be created to store those flagged data as well. For example an `image` input to `image` output interface will create the following structure.\n\n```directory\n+-- flagged/\n|   +-- logs.csv\n|   +-- image/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n```\n_flagged/logs.csv_\n```csv\nim,Output timestamp\nim/0.png,Output/0.png,2022-02-04 19:49:58.026963\nim/1.png,Output/1.png,2022-02-02 10:40:51.093412\n```\n\nIf you wish for the user to provide a reason for flagging, you can pass a list of strings to the `flagging_options` argument of Interface. Users will have to select one of these choices when flagging, and the option will be saved as an additional column to the CSV.\n\nIf we go back to the calculator example, the following code will create the interface embedded below it.  \n```python\niface = gr.Interface(\n    calculator,\n    [\"number\", gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]), \"number\"],\n    \"number\",\n    allow_flagging=\"manual\",\n    flagging_options=[\"wrong sign\", \"off by one\", \"other\"]\n)\n\niface.launch()\n```\n<gradio-app space=\"gradio/calculator-flagging-options/\"></gradio-app>\n\nWhen users click the flag button, the csv file will now include a column indicating the selected option.\n\n_flagged/logs.csv_\n```csv\nnum1,operation,num2,Output,flag,timestamp\n5,add,7,-12,wrong sign,2022-02-04 11:40:51.093412\n6,subtract,1.5,3.5,off by one,2022-02-04 11:42:32.062512\n```\n\n## The HuggingFaceDatasetSaver Callback\n\nSometimes, saving the data to a local CSV file doesn't make sense. For example, on Hugging Face\nSpaces, developers typically don't have access to the underlying ephemeral machine hosting the Gradio\ndemo. That's why, by default, flagging is turned off in Hugging Face Space. However,\nyou may want to do something else with the flagged data.\n\nWe've made this super easy with the `flagging_callback` parameter.\n\nFor example, below we're going to pipe flagged data from our calculator example into a Hugging Face Dataset, e.g. so that we can build a \"crowd-sourced\" dataset:\n\n\n```python\nimport os\n\nHF_TOKEN = os.getenv('HF_TOKEN')\nhf_writer = gr.HuggingFaceDatasetSaver(HF_TOKEN, \"crowdsourced-calculator-demo\")\n\niface = gr.Interface(\n    calculator,\n    [\"number\", gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]), \"number\"],\n    \"number\",\n    description=\"Check out the crowd-sourced dataset at: [https://huggingface.co/datasets/aliabd/crowdsourced-calculator-demo](https://huggingface.co/datasets/aliabd/crowdsourced-calculator-demo)\",\n    allow_flagging=\"manual\",\n    flagging_options=[\"wrong sign\", \"off by one\", \"other\"],\n    flagging_callback=hf_writer\n)\n\niface.launch()\n```\n\nNotice that we define our own \ninstance of  `gradio.HuggingFaceDatasetSaver` using our Hugging Face token and\nthe name of a dataset we'd like to save samples to. In addition, we also set `allow_flagging=\"manual\"`\nbecause on Hugging Face Spaces, `allow_flagging` is set to `\"never\"` by default. Here's our demo:\n\n<gradio-app space=\"gradio/calculator-flagging-crowdsourced/\"></gradio-app>\n\nYou can now see all the examples flagged above in this [public Hugging Face dataset](https://huggingface.co/datasets/aliabd/crowdsourced-calculator-demo).\n\n![flagging callback hf](https://github.com/gradio-app/gradio/blob/main/guides/assets/flagging-callback-hf.png?raw=true)\n\nWe created the `gradio.HuggingFaceDatasetSaver` class, but you can pass your own custom class as long as it inherits from `FLaggingCallback` defined in [this file](https://github.com/gradio-app/gradio/blob/master/gradio/flagging.py). If you create a cool callback, contribute it to the repo! \n\n## Flagging with Blocks\n\nWhat about if you are using `gradio.Blocks`? On one hand, you have even more flexibility\nwith Blocks -- you can write whatever Python code you want to run when a button is clicked,\nand assign that using the built-in events in Blocks.\n\nAt the same time, you might want to use an existing `FlaggingCallback` to avoid writing extra code.\nThis requires two steps:\n\n1. You have to run your callback's `.setup()` somewhere in the code prior to the \nfirst time you flag data\n2. When the flagging button is clicked, then you trigger the callback's `.flag()` method,\nmaking sure to collect the arguments correctly and disabling the typical preprocessing. \n\nHere is an example with an image sepia filter Blocks demo that lets you flag\ndata using the default `CSVLogger`:\n\n```python\nimport numpy as np\nimport gradio as gr\n\ndef sepia(input_img, strength):\n    sepia_filter = strength * np.array(\n        [[0.393, 0.769, 0.189], [0.349, 0.686, 0.168], [0.272, 0.534, 0.131]]\n    ) + (1-strength) * np.identity(3)\n    sepia_img = input_img.dot(sepia_filter.T)\n    sepia_img /= sepia_img.max()\n    return sepia_img\n\ncallback = gr.CSVLogger()\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            img_input = gr.Image()\n            strength = gr.Slider(0, 1, 0.5)\n        img_output = gr.Image()\n    with gr.Row():\n        btn = gr.Button(\"Flag\")\n        \n    # This needs to be called at some point prior to the first call to callback.flag()\n    callback.setup([img_input, strength, img_output], \"flagged_data_points\")\n\n    img_input.change(sepia, [img_input, strength], img_output)\n    strength.change(sepia, [img_input, strength], img_output)\n    \n    # We can choose which components to flag -- in this case, we'll flag all of them\n    btn.click(lambda *args: callback.flag(args), [img_input, strength, img_output], None, preprocess=False)\n\ndemo.launch()\n\n```\n<gradio-app space='gradio/blocks_flag'></gradio-app>\n\n## Privacy\n\nImportant Note: please make sure your users understand when the data they submit is being saved, and what you plan on doing with it. This is especially important when you use `allow_flagging=auto` (when all of the data submitted through the demo is being flagged)\n\n### That's all! Happy building :) \n", "html": "<h1 id=\"using-flagging\">Using Flagging</h1>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>When you demo a machine learning model, you might want to collect data from users who try the model, particularly data points in which the model is not behaving as expected. Capturing these \"hard\" data points is valuable because it allows you to improve your machine learning model and make it more reliable and robust.</p>\n\n<p>Gradio simplifies the collection of this data by including a <strong>Flag</strong> button with every <code>Interface</code>. This allows a user or tester to easily send data back to the machine where the demo is running. In this Guide, we discuss more about how to use the flagging feature, both with <code>gradio.Interface</code> as well as with <code>gradio.Blocks</code>.</p>\n\n<h2 id=\"the-flag-button-in-gradiointerface\">The <strong>Flag</strong> button in <code>gradio.Interface</code></h2>\n\n<p>Flagging with Gradio's <code>Interface</code> is especially easy. By default, underneath the output components, there is a button marked <strong>Flag</strong>. When a user testing your model sees input with interesting output, they can click the flag button to send the input and output data back to the machine where the demo is running. The sample is saved to a CSV log file (by default). If the demo involves images, audio, video, or other types of files, these are saved separately in a parallel directory and the paths to these files are saved in the CSV file.</p>\n\n<p>There are <a rel=\"noopener\" target=\"_blank\" href=\"https://gradio.app/docs/#interface-header\">four parameters</a> in <code>gradio.Interface</code> that control how flagging works. We will go over them in greater detail.</p>\n\n<ul>\n<li><code>allow_flagging</code>: this parameter can be set to either <code>\"manual\"</code> (default), <code>\"auto\"</code>, or <code>\"never\"</code>. <br />\n<ul>\n<li><code>manual</code>: users will see a button to flag, and samples are only flagged when the button is clicked.</li>\n<li><code>auto</code>: users will not see a button to flag, but every sample will be flagged automatically. </li>\n<li><code>never</code>: users will not see a button to flag, and no sample will be flagged. </li>\n</ul></li>\n<li><code>flagging_options</code>: this parameter can be either <code>None</code> (default) or a list of strings.\n<ul>\n<li>If <code>None</code>, then the user simply clicks on the <strong>Flag</strong> button and no additional options are shown.</li>\n<li>If a list of strings are provided, then the user sees several buttons, corresponding to each of the strings that are provided. For example, if the value of this parameter is <code>[\"Incorrect\", \"Ambiguous\"]</code>, then buttons labeled <strong>Flag as Incorrect</strong> and <strong>Flag as Ambiguous</strong> appear. This only applies if <code>allow_flagging</code> is <code>\"manual\"</code>.</li>\n<li>The chosen option is then logged along with the input and output.</li>\n</ul></li>\n<li><code>flagging_dir</code>: this parameter takes a string.\n<ul>\n<li>It represents what to name the directory where flagged data is stored.</li>\n</ul></li>\n<li><code>flagging_callback</code>: this parameter takes an instance of a subclass of the <code>FlaggingCallback</code> class\n<ul>\n<li>Using this parameter allows you to write custom code that gets run when the flag button is clicked</li>\n<li>By default, this is set to an instance of <code>gr.CSVLogger</code></li>\n<li>One example is setting it to an instance of <code>gr.HuggingFaceDatasetSaver</code> which can allow you to pipe any flagged data into a HuggingFace Dataset. (See more below.)</li>\n</ul></li>\n</ul>\n\n<h2 id=\"what-happens-to-flagged-data\">What happens to flagged data?</h2>\n\n<p>Within the directory provided by the <code>flagging_dir</code> argument, a CSV file will log the flagged data. </p>\n\n<p>Here's an example: The code below creates the calculator interface embedded below it:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>import gradio as gr\n\n\ndef calculator(num1, operation, num2):\n    if operation == \"add\":\n        return num1 + num2\n    elif operation == \"subtract\":\n        return num1 - num2\n    elif operation == \"multiply\":\n        return num1 * num2\n    elif operation == \"divide\":\n        return num1 / num2\n\n\niface = gr.Interface(\n    calculator,\n    [\"number\", gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]), \"number\"],\n    \"number\",\n    allow_flagging=\"manual\"\n)\n\niface.launch()\n</code></pre></div>\n\n<p><gradio-app space=\"gradio/calculator-flag-basic/\"></gradio-app></p>\n\n<p>When you click the flag button above, the directory where the interface was launched will include a new flagged subfolder, with a csv file inside it. This csv file includes all the data that was flagged. </p>\n\n<div class='codeblock'><pre><code class='lang-directory'>+-- flagged/\n|   +-- logs.csv\n</code></pre></div>\n\n<p><em>flagged/logs.csv</em></p>\n\n<div class='codeblock'><pre><code class='lang-csv'>num1,operation,num2,Output,timestamp\n5,add,7,12,2022-01-31 11:40:51.093412\n6,subtract,1.5,4.5,2022-01-31 03:25:32.023542\n</code></pre></div>\n\n<p>If the interface involves file data, such as for Image and Audio components, folders will be created to store those flagged data as well. For example an <code>image</code> input to <code>image</code> output interface will create the following structure.</p>\n\n<div class='codeblock'><pre><code class='lang-directory'>+-- flagged/\n|   +-- logs.csv\n|   +-- image/\n|   |   +-- 0.png\n|   |   +-- 1.png\n|   +-- Output/\n|   |   +-- 0.png\n|   |   +-- 1.png\n</code></pre></div>\n\n<p><em>flagged/logs.csv</em></p>\n\n<div class='codeblock'><pre><code class='lang-csv'>im,Output timestamp\nim/0.png,Output/0.png,2022-02-04 19:49:58.026963\nim/1.png,Output/1.png,2022-02-02 10:40:51.093412\n</code></pre></div>\n\n<p>If you wish for the user to provide a reason for flagging, you can pass a list of strings to the <code>flagging_options</code> argument of Interface. Users will have to select one of these choices when flagging, and the option will be saved as an additional column to the CSV.</p>\n\n<p>If we go back to the calculator example, the following code will create the interface embedded below it.  </p>\n\n<div class='codeblock'><pre><code class='lang-python'>iface = gr.Interface(\n    calculator,\n    [\"number\", gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]), \"number\"],\n    \"number\",\n    allow_flagging=\"manual\",\n    flagging_options=[\"wrong sign\", \"off by one\", \"other\"]\n)\n\niface.launch()\n</code></pre></div>\n\n<p><gradio-app space=\"gradio/calculator-flagging-options/\"></gradio-app></p>\n\n<p>When users click the flag button, the csv file will now include a column indicating the selected option.</p>\n\n<p><em>flagged/logs.csv</em></p>\n\n<div class='codeblock'><pre><code class='lang-csv'>num1,operation,num2,Output,flag,timestamp\n5,add,7,-12,wrong sign,2022-02-04 11:40:51.093412\n6,subtract,1.5,3.5,off by one,2022-02-04 11:42:32.062512\n</code></pre></div>\n\n<h2 id=\"the-huggingfacedatasetsaver-callback\">The HuggingFaceDatasetSaver Callback</h2>\n\n<p>Sometimes, saving the data to a local CSV file doesn't make sense. For example, on Hugging Face\nSpaces, developers typically don't have access to the underlying ephemeral machine hosting the Gradio\ndemo. That's why, by default, flagging is turned off in Hugging Face Space. However,\nyou may want to do something else with the flagged data.</p>\n\n<p>We've made this super easy with the <code>flagging_callback</code> parameter.</p>\n\n<p>For example, below we're going to pipe flagged data from our calculator example into a Hugging Face Dataset, e.g. so that we can build a \"crowd-sourced\" dataset:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>import os\n\nHF_TOKEN = os.getenv('HF_TOKEN')\nhf_writer = gr.HuggingFaceDatasetSaver(HF_TOKEN, \"crowdsourced-calculator-demo\")\n\niface = gr.Interface(\n    calculator,\n    [\"number\", gr.Radio([\"add\", \"subtract\", \"multiply\", \"divide\"]), \"number\"],\n    \"number\",\n    description=\"Check out the crowd-sourced dataset at: [https://huggingface.co/datasets/aliabd/crowdsourced-calculator-demo](https://huggingface.co/datasets/aliabd/crowdsourced-calculator-demo)\",\n    allow_flagging=\"manual\",\n    flagging_options=[\"wrong sign\", \"off by one\", \"other\"],\n    flagging_callback=hf_writer\n)\n\niface.launch()\n</code></pre></div>\n\n<p>Notice that we define our own \ninstance of  <code>gradio.HuggingFaceDatasetSaver</code> using our Hugging Face token and\nthe name of a dataset we'd like to save samples to. In addition, we also set <code>allow_flagging=\"manual\"</code>\nbecause on Hugging Face Spaces, <code>allow_flagging</code> is set to <code>\"never\"</code> by default. Here's our demo:</p>\n\n<p><gradio-app space=\"gradio/calculator-flagging-crowdsourced/\"></gradio-app></p>\n\n<p>You can now see all the examples flagged above in this <a rel=\"noopener\" target=\"_blank\" href=\"https://huggingface.co/datasets/aliabd/crowdsourced-calculator-demo\">public Hugging Face dataset</a>.</p>\n\n<p><img src=\"https://github.com/gradio-app/gradio/blob/main/guides/assets/flagging-callback-hf.png?raw=true\" alt=\"flagging callback hf\" /></p>\n\n<p>We created the <code>gradio.HuggingFaceDatasetSaver</code> class, but you can pass your own custom class as long as it inherits from <code>FLaggingCallback</code> defined in <a rel=\"noopener\" target=\"_blank\" href=\"https://github.com/gradio-app/gradio/blob/master/gradio/flagging.py\">this file</a>. If you create a cool callback, contribute it to the repo! </p>\n\n<h2 id=\"flagging-with-blocks\">Flagging with Blocks</h2>\n\n<p>What about if you are using <code>gradio.Blocks</code>? On one hand, you have even more flexibility\nwith Blocks -- you can write whatever Python code you want to run when a button is clicked,\nand assign that using the built-in events in Blocks.</p>\n\n<p>At the same time, you might want to use an existing <code>FlaggingCallback</code> to avoid writing extra code.\nThis requires two steps:</p>\n\n<ol>\n<li>You have to run your callback's <code>.setup()</code> somewhere in the code prior to the \nfirst time you flag data</li>\n<li>When the flagging button is clicked, then you trigger the callback's <code>.flag()</code> method,\nmaking sure to collect the arguments correctly and disabling the typical preprocessing. </li>\n</ol>\n\n<p>Here is an example with an image sepia filter Blocks demo that lets you flag\ndata using the default <code>CSVLogger</code>:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>import numpy as np\nimport gradio as gr\n\ndef sepia(input_img, strength):\n    sepia_filter = strength * np.array(\n        [[0.393, 0.769, 0.189], [0.349, 0.686, 0.168], [0.272, 0.534, 0.131]]\n    ) + (1-strength) * np.identity(3)\n    sepia_img = input_img.dot(sepia_filter.T)\n    sepia_img /= sepia_img.max()\n    return sepia_img\n\ncallback = gr.CSVLogger()\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            img_input = gr.Image()\n            strength = gr.Slider(0, 1, 0.5)\n        img_output = gr.Image()\n    with gr.Row():\n        btn = gr.Button(\"Flag\")\n\n    # This needs to be called at some point prior to the first call to callback.flag()\n    callback.setup([img_input, strength, img_output], \"flagged_data_points\")\n\n    img_input.change(sepia, [img_input, strength], img_output)\n    strength.change(sepia, [img_input, strength], img_output)\n\n    # We can choose which components to flag -- in this case, we'll flag all of them\n    btn.click(lambda *args: callback.flag(args), [img_input, strength, img_output], None, preprocess=False)\n\ndemo.launch()\n\n</code></pre></div>\n\n<p><gradio-app space='gradio/blocks_flag'></gradio-app></p>\n\n<h2 id=\"privacy\">Privacy</h2>\n\n<p>Important Note: please make sure your users understand when the data they submit is being saved, and what you plan on doing with it. This is especially important when you use <code>allow_flagging=auto</code> (when all of the data submitted through the demo is being flagged)</p>\n\n<h3 id=\"thats-all-happy-building\">That's all! Happy building :)</h3>\n", "tags": ["FLAGGING", "DATA"], "spaces": ["https://huggingface.co/spaces/gradio/calculator-flagging-crowdsourced", "https://huggingface.co/spaces/gradio/calculator-flagging-options", "https://huggingface.co/spaces/gradio/calculator-flag-basic"], "url": "/guides/using-flagging/", "contributor": null}}