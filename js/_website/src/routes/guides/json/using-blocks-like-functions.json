{"guide": {"name": "using-blocks-like-functions", "category": "building-with-blocks", "pretty_category": "Building With Blocks", "guide_index": 5, "absolute_index": 12, "pretty_name": "Using Blocks Like Functions", "content": "# Using Gradio Blocks Like Functions\nTags: TRANSLATION, HUB, SPACES\n\n\n**Prerequisite**: This Guide builds on the Blocks Introduction. Make sure to [read that guide first](https://gradio.app/guides/quickstart/#blocks-more-flexibility-and-control).\n\n## Introduction\n\nDid you know that apart from being a full-stack machine learning demo, a Gradio Blocks app is also a regular-old python function!?\n\nThis means that if you have a gradio Blocks (or Interface) app called `demo`, you can use `demo` like you would any python function.\n\nSo doing something like `output = demo(\"Hello\", \"friend\")` will run the first event defined in `demo` on the inputs \"Hello\" and \"friend\" and store it\nin the variable `output`.\n\nIf I put you to sleep \ud83e\udd71, please bear with me! By using apps like functions, you can seamlessly compose Gradio apps.\nThe following section will show how.\n\n## Treating Blocks like functions\n\nLet's say we have the following demo that translates english text to german text. \n\n```python\nimport gradio as gr\n\nfrom transformers import pipeline\n\npipe = pipeline(\"translation\", model=\"t5-base\")\n\n\ndef translate(text):\n    return pipe(text)[0][\"translation_text\"]\n\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            english = gr.Textbox(label=\"English text\")\n            translate_btn = gr.Button(value=\"Translate\")\n        with gr.Column():\n            german = gr.Textbox(label=\"German Text\")\n\n    translate_btn.click(translate, inputs=english, outputs=german, api_name=\"translate-to-german\")\n    examples = gr.Examples(examples=[\"I went to the supermarket yesterday.\", \"Helen is a good swimmer.\"],\n                           inputs=[english])\n\ndemo.launch()\n```\n\nI already went ahead and hosted it in Hugging Face spaces at [gradio/english_translator](https://huggingface.co/spaces/gradio/english_translator).\n\nYou can see the demo below as well:\n\n<gradio-app space='gradio/english_translator'></gradio-app>\n\nNow, let's say you have an app that generates english text, but you wanted to additionally generate german text.\n\nYou could either:\n\n1. Copy the source code of my english-to-german translation and paste it in your app.\n\n2. Load my english-to-german translation in your app and treat it like a normal python function.\n\nOption 1 technically always works, but it often introduces unwanted complexity.\n\nOption 2 lets you borrow the functionality you want without tightly coupling our apps.\n\nAll you have to do is call the `Blocks.load` class method in your source file.\nAfter that, you can use my translation app like a regular python function!\n\nThe following code snippet and demo shows how to use `Blocks.load`.\n\nNote that the variable `english_translator` is my english to german app, but its used in `generate_text` like a regular function.\n\n```python\nimport gradio as gr\n\nfrom transformers import pipeline\n\nenglish_translator = gr.Blocks.load(name=\"spaces/gradio/english_translator\")\nenglish_generator = pipeline(\"text-generation\", model=\"distilgpt2\")\n\n\ndef generate_text(text):\n    english_text = english_generator(text)[0][\"generated_text\"]\n    german_text = english_translator(english_text)\n    return english_text, german_text\n\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            seed = gr.Text(label=\"Input Phrase\")\n        with gr.Column():\n            english = gr.Text(label=\"Generated English Text\")\n            german = gr.Text(label=\"Generated German Text\")\n    btn = gr.Button(\"Generate\")\n    btn.click(generate_text, inputs=[seed], outputs=[english, german])\n    gr.Examples([\"My name is Clara and I am\"], inputs=[seed])\n\ndemo.launch()\n```\n\n<gradio-app space='gradio/generate_english_german'></gradio-app>\n\n## How to control which function in the app to use\n\nIf the app you are loading defines more than one function, you can specify which function to use\nwith the `fn_index` and `api_name` parameters.\n\nIn the code for our english to german demo, you'll see the following line:\n\n```python\ntranslate_btn.click(translate, inputs=english, outputs=german, api_name=\"translate-to-german\")\n```\n\nThe `api_name` gives this function a unique name in our app. You can use this name to tell gradio which\nfunction in the upstream space you want to use:\n\n```python\nenglish_generator(text, api_name=\"translate-to-german\")[0][\"generated_text\"]\n```\n\nYou can also use the `fn_index` parameter.\nImagine my app also defined an english to spanish translation function.\nIn order to use it in our text generation app, we would use the following code:\n\n```python\nenglish_generator(text, fn_index=1)[0][\"generated_text\"]\n```\n\nFunctions in gradio spaces are zero-indexed, so since the spanish translator would be the second function in my space,\nyou would use index 1. \n\n## Parting Remarks\n\nWe showed how treating a Blocks app like a regular python helps you compose functionality across different apps.\nAny Blocks app can be treated like a function, but a powerful pattern is to `load` an app hosted on \n[Hugging Face Spaces](https://huggingface.co/spaces) prior to treating it like a function in your own app.\nYou can also load models hosted on the [Hugging Face Model Hub](https://huggingface.co/models) - see the [Using Hugging Face Integrations](/using_hugging_face_integrations) guide for an example.\n\n### Happy building! \u2692\ufe0f\n", "html": "<h1 id=\"using-gradio-blocks-like-functions\">Using Gradio Blocks Like Functions</h1>\n\n<p><strong>Prerequisite</strong>: This Guide builds on the Blocks Introduction. Make sure to <a rel=\"noopener\" target=\"_blank\" href=\"https://gradio.app/guides/quickstart/#blocks-more-flexibility-and-control\">read that guide first</a>.</p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>Did you know that apart from being a full-stack machine learning demo, a Gradio Blocks app is also a regular-old python function!?</p>\n\n<p>This means that if you have a gradio Blocks (or Interface) app called <code>demo</code>, you can use <code>demo</code> like you would any python function.</p>\n\n<p>So doing something like <code>output = demo(\"Hello\", \"friend\")</code> will run the first event defined in <code>demo</code> on the inputs \"Hello\" and \"friend\" and store it\nin the variable <code>output</code>.</p>\n\n<p>If I put you to sleep \ud83e\udd71, please bear with me! By using apps like functions, you can seamlessly compose Gradio apps.\nThe following section will show how.</p>\n\n<h2 id=\"treating-blocks-like-functions\">Treating Blocks like functions</h2>\n\n<p>Let's say we have the following demo that translates english text to german text. </p>\n\n<div class='codeblock'><pre><code class='lang-python'>import gradio as gr\n\nfrom transformers import pipeline\n\npipe = pipeline(\"translation\", model=\"t5-base\")\n\n\ndef translate(text):\n    return pipe(text)[0][\"translation_text\"]\n\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            english = gr.Textbox(label=\"English text\")\n            translate_btn = gr.Button(value=\"Translate\")\n        with gr.Column():\n            german = gr.Textbox(label=\"German Text\")\n\n    translate_btn.click(translate, inputs=english, outputs=german, api_name=\"translate-to-german\")\n    examples = gr.Examples(examples=[\"I went to the supermarket yesterday.\", \"Helen is a good swimmer.\"],\n                           inputs=[english])\n\ndemo.launch()\n</code></pre></div>\n\n<p>I already went ahead and hosted it in Hugging Face spaces at <a rel=\"noopener\" target=\"_blank\" href=\"https://huggingface.co/spaces/gradio/english_translator\">gradio/english_translator</a>.</p>\n\n<p>You can see the demo below as well:</p>\n\n<p><gradio-app space='gradio/english_translator'></gradio-app></p>\n\n<p>Now, let's say you have an app that generates english text, but you wanted to additionally generate german text.</p>\n\n<p>You could either:</p>\n\n<ol>\n<li><p>Copy the source code of my english-to-german translation and paste it in your app.</p></li>\n<li><p>Load my english-to-german translation in your app and treat it like a normal python function.</p></li>\n</ol>\n\n<p>Option 1 technically always works, but it often introduces unwanted complexity.</p>\n\n<p>Option 2 lets you borrow the functionality you want without tightly coupling our apps.</p>\n\n<p>All you have to do is call the <code>Blocks.load</code> class method in your source file.\nAfter that, you can use my translation app like a regular python function!</p>\n\n<p>The following code snippet and demo shows how to use <code>Blocks.load</code>.</p>\n\n<p>Note that the variable <code>english_translator</code> is my english to german app, but its used in <code>generate_text</code> like a regular function.</p>\n\n<div class='codeblock'><pre><code class='lang-python'>import gradio as gr\n\nfrom transformers import pipeline\n\nenglish_translator = gr.Blocks.load(name=\"spaces/gradio/english_translator\")\nenglish_generator = pipeline(\"text-generation\", model=\"distilgpt2\")\n\n\ndef generate_text(text):\n    english_text = english_generator(text)[0][\"generated_text\"]\n    german_text = english_translator(english_text)\n    return english_text, german_text\n\n\nwith gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column():\n            seed = gr.Text(label=\"Input Phrase\")\n        with gr.Column():\n            english = gr.Text(label=\"Generated English Text\")\n            german = gr.Text(label=\"Generated German Text\")\n    btn = gr.Button(\"Generate\")\n    btn.click(generate_text, inputs=[seed], outputs=[english, german])\n    gr.Examples([\"My name is Clara and I am\"], inputs=[seed])\n\ndemo.launch()\n</code></pre></div>\n\n<p><gradio-app space='gradio/generate<em>english</em>german'></gradio-app></p>\n\n<h2 id=\"how-to-control-which-function-in-the-app-to-use\">How to control which function in the app to use</h2>\n\n<p>If the app you are loading defines more than one function, you can specify which function to use\nwith the <code>fn_index</code> and <code>api_name</code> parameters.</p>\n\n<p>In the code for our english to german demo, you'll see the following line:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>translate_btn.click(translate, inputs=english, outputs=german, api_name=\"translate-to-german\")\n</code></pre></div>\n\n<p>The <code>api_name</code> gives this function a unique name in our app. You can use this name to tell gradio which\nfunction in the upstream space you want to use:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>english_generator(text, api_name=\"translate-to-german\")[0][\"generated_text\"]\n</code></pre></div>\n\n<p>You can also use the <code>fn_index</code> parameter.\nImagine my app also defined an english to spanish translation function.\nIn order to use it in our text generation app, we would use the following code:</p>\n\n<div class='codeblock'><pre><code class='lang-python'>english_generator(text, fn_index=1)[0][\"generated_text\"]\n</code></pre></div>\n\n<p>Functions in gradio spaces are zero-indexed, so since the spanish translator would be the second function in my space,\nyou would use index 1. </p>\n\n<h2 id=\"parting-remarks\">Parting Remarks</h2>\n\n<p>We showed how treating a Blocks app like a regular python helps you compose functionality across different apps.\nAny Blocks app can be treated like a function, but a powerful pattern is to <code>load</code> an app hosted on \n<a rel=\"noopener\" target=\"_blank\" href=\"https://huggingface.co/spaces\">Hugging Face Spaces</a> prior to treating it like a function in your own app.\nYou can also load models hosted on the <a rel=\"noopener\" target=\"_blank\" href=\"https://huggingface.co/models\">Hugging Face Model Hub</a> - see the <a rel=\"noopener\" target=\"_blank\" href=\"/using_hugging_face_integrations\">Using Hugging Face Integrations</a> guide for an example.</p>\n\n<h3 id=\"happy-building\">Happy building! \u2692\ufe0f</h3>\n", "tags": ["TRANSLATION", "HUB", "SPACES"], "spaces": [], "url": "/guides/using-blocks-like-functions/", "contributor": null}}